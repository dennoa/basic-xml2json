{
  "name": "Basic-xml2json",
  "tagline": "Simple parser to convert XML strings to JSON.",
  "body": "# basic-xml2json\r\nSimple parser to convert XML strings to JSON.\r\n\r\n## Usage\r\n\tvar xml2json = require('basic-xml2json');\r\n\t\r\n#### parse\r\nThis code is based off the xml-parser here: [https://github.com/segmentio/xml-parser](https://github.com/segmentio/xml-parser). Please see that page for details of the JSON output.\r\n\r\nThe parse function takes an XML string (mandatory) and an object describing the options (optional).\r\n\r\n\tvar json = xml2json.parse(xml, options);\r\n\t\r\nOr\r\n\r\n\tvar json = xml2json.parse(xml);\r\n\t\r\n###### parse:options\r\n*\tremoveNamespacePrefixes\r\n\t\r\n\tBoolean, defaults to true. Set this to false if you want to retain xml namespace prefixes in the JSON output.\r\n\t\r\n\t\tvar options = { removeNamespacePrefixes: false };\r\n\t\t\r\n#### getChildNodes\r\nGet an array of matching nodes under the specified parent node for the specified path.\r\n\r\n\tvar json = xml2json.parse(xml);\r\n\tvar nodes = xml2json.getChildNodes(json.root, ['Body','Response','Address']);\r\n\t\t\r\n#### getChildNode\r\nGet the first matching node under the specified parent node for the specified path.\r\n\r\n\tvar json = xml2json.parse(xml);\r\n\tvar address = xml2json.getChildNode(json.root, ['Body','Response','Address']);\r\n\t\t\r\n#### getContent\r\nGet the value of the first matching node under the specified parent node for the specified path. Encoded XML values will are decoded.\r\n\r\n\tvar json = xml2json.parse(xml);\r\n\tvar address = xml2json.getChildNode(json.root, ['Body','Response','Address']);\r\n\tvar suburb = xml2json.getContent(address, 'Suburb');\r\n\r\nOr\r\n\tvar suburb = xml2json.getContent(json.root, ['Body','Response','Address','Suburb']);\r\n\t\t\r\n#### getRawContent\r\nJust like getContent except that encoded XML values are not decoded.\r\n\r\n\tvar suburb = xml2json.getRawContent(json.root, ['Body','Response','Address','Suburb']);\r\n\t\t\r\n#### getAllContent\r\nGet an array of values for the matching nodes under the specified parent node for the specified path. Encoded XML values will are decoded.\r\n\r\n\tvar json = xml2json.parse(xml);\r\n\tvar suburbs = xml2json.getAllContent(json.root, ['Body','Response','Address','Suburb']);\r\n\r\n#### decodeXML\r\nDecode some text.\r\n\r\n\tvar decodedText = decodeXML(text);\r\n\t\r\n#### encodeXML\r\nEncode some text.\r\n\r\n\tvar encodedText = encodeXML(text);\r\n\t\r\n#### Wildcard Matching\r\nProbably rarely useful, but if you have a situation where you need to match elements with different paths (but at the same depth) then you can use a wildcard match. For example:\r\n\r\n\t<xmldoc>\r\n\t\t<postalAddress>\r\n\t\t\t<suburb>Brisbane</suburb>\r\n\t\t</postalAddress>\r\n\t\t<billingAddress>\r\n\t\t\t<suburb>Sydney</suburb>\r\n\t\t</billingAddress>\r\n\t</xmldoc>\r\n\t\r\n\tvar json = xml2json.parse(xml);\r\n\tvar suburbs = xml2json.getAllContent(json.root, [xml2json.ANY, 'suburb']);\r\n\t\r\nIn this example, suburbs will be ['Brisbane','Sydney'].\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}